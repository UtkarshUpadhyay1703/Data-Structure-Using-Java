package treeDuplicate;

import java.util.Stack;

public class Tree {
	private Node root;

	public Tree() {
		this.root = null;
	}

	public Node getRoot() {
		return root;
	}

	public void setRoot(Node root) {
		this.root = root;
	}
	public boolean insert(int data) {
		Node newNode =new Node(data);
		if(root==null) {
			root=newNode;
			return true;
		}
		Node temp=root;
		while(true) {
			if(temp.getData()==data)return false;
			if(temp.getData()<data) {
				if(temp.getLeft()==null) {
					temp.setLeft(newNode);
					return true;
				}
				temp=temp.getLeft();
			}
			else {
				if(temp.getRight()==null) {
					temp.setRight(newNode);
					return true;
				}
				temp=temp.getRight();
			}
		}	
	}
	
	public void preOrder() {
		if(root==null)return;
		Stack<Node> stack=new Stack<>();
		Node temp=root;
		while(temp!=null || !stack.isEmpty() ) {
			while(temp!=null) {
				System.out.println(temp.getData());
				stack.push(temp);
				temp=temp.getLeft();
			}
			temp=stack.pop();
			temp=temp.getRight();
		}
	}
	
	public void inOrder() {
		if(root==null)return;
		Stack<Node> stack=new Stack<>();
		Node temp=root;
		while(temp!=null || !stack.isEmpty()) {
			while(temp!=null) {
				stack.push(temp);
				temp=temp.getLeft();
			}
			temp=stack.pop();
			System.out.println(temp.getData());
			temp=temp.getRight();
		}
	}
	
	public void postOrder() {
		if(root==null)return;
		class Pair{
			Node node;
			char flag;
			public Pair(Node node, char flag) {
				this.node = node;
				this.flag = flag;
			}
		}
			Node temp=root;
			Stack<Pair> stack=new Stack<>();
			while(temp!=null && !stack.isEmpty()) {
				while(temp!=null) {
					stack.push(new Pair(temp, 'L'));
					temp=temp.getLeft();
				}
				Pair pair=stack.pop();
				temp=pair.node;
				if(pair.flag=='R') {
					System.out.println(temp.getData());
					temp=null;
				}else {
					stack.push(new Pair(temp, 'R'));
					temp=temp.getRight();
				}
			}
	}
	
	public void deleteNode(int data) {
		if(root==null)return;
		if(root.getData()==data) {
			root=null;
			return;
		}
		Node deletableNode=root;
		Node parentNode=root;
		while(deletableNode!=null) {
			if(deletableNode.getData()<data) {
				parentNode=deletableNode;
						deletableNode=deletableNode.getRight();
			}
			if(deletableNode.getData()>data) {
				parentNode=deletableNode;
				deletableNode=deletableNode.getLeft();
			}
			
			else if(deletableNode.getLeft()==null && deletableNode.getRight()==null) {
					if(parentNode.getLeft()==deletableNode) {
						parentNode.setLeft(null);
					}else {
						parentNode.setRight(null);
					}
				}else {
					if(deletableNode.getLeft()!=null) {
						parentNode=deletableNode;
						Node max=deletableNode.getLeft();
						while(max.getRight()!=null) {
							parentNode=max;
							max=max.getRight();
						}
						int temp=max.getData();
						max.setData(deletableNode.getData());
						deletableNode.setData(temp);
						deletableNode=max;
					}
					else {
						parentNode=deletableNode;
						Node min=deletableNode.getRight();
						while(min.getLeft()!=null) {
							parentNode=min;
							min=min.getLeft();
						}
						int temp=min.getData();
						min.setData(deletableNode.getData());
						deletableNode.setData(temp);
						deletableNode=min;
					}
				}
			}
		}
	}
	
	
}
