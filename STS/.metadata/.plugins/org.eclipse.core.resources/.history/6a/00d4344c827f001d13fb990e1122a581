package com.bst;

import java.util.Stack;

public class BST {
	Node root;
	
	public boolean insert (int data) {
		Node newNode = new Node(data);
		if(root == null) {
			root = newNode;
			return true;
		}
		
		Node temp = root;
		while(true) {
			if(temp.getData() == data) {
				return false;
			}
			
			if(temp.getData() > data) {
				if(temp.getLeft()==null) {
					temp.setLeft(newNode);
					return true;
				}
				temp = temp.getLeft();
			}
			else {
				if(temp.getRight() == null) {
					temp.setRight(newNode);
					return true;
				}
				temp = temp.getRight();
			}
		}
	}
	
	public void preOrder() {
		Stack<Node> stack = new Stack<>();
		Node temp = root;
		
		while(temp!=null || !stack.isEmpty()) {
			while(temp!=null) {
				System.out.print(temp.getData()+" ");
				stack.push(temp);
				temp = temp.getLeft();
			}
			temp = stack.pop();
			temp = temp.getRight();
		}
	}
	
	public void inOrder() {
		Stack<Node> stack = new Stack<>();
		Node temp = root;
		
		while(temp!=null || !stack.isEmpty()) {
			while(temp!=null) {
				stack.push(temp);
				temp = temp.getLeft();
			}
			temp = stack.pop();
			System.out.print(temp.getData()+" ");
			temp = temp.getRight();
		}
	}
	
	public void postOrder() {
		class Pair {
			Node node;
			char flag;
			
			public Pair(Node node, char flag) {
				this.node = node;
				this.flag = flag;
			}
		}
		
		Stack<Pair> stack = new Stack<>();
		Node temp = root;
		
		while(temp!=null || !stack.isEmpty()) {
			while(temp!=null) {
				stack.push(new Pair(temp, 'L'));
				temp = temp.getLeft();
			}
			Pair pair = stack.pop();
			
			if(pair.flag == 'L') {
				temp = pair.node.getRight();
				pair.flag = 'R';
				stack.push(pair);
			}
			else {
				System.out.print(pair.node.getData()+" ");
			}
		}
		
	}
	
	public boolean deleteNode(int data) {
		if(root == null) return false;
		
		Node del = root, parent = root;
		while(del.getData() != data) {
			parent = del;
			if(del.getData() > data) {
				del = del.getLeft();
			}
			else {
				del.getRight();
			}
			if(del == null) {
				return flase;
			}
		}
	}
}















